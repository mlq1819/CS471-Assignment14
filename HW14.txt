Michael Quinn

Part A: Do but don't need to hand in
1. What is the type of  (\x -> x)?
	It is of type p -> p
	
2. What is the value of the following?
a) (\x -> x) 3
	3
b) (\x -> x) (+) 5 3
	8
c) (\x -> x) (+)
	No value, causes an error (not enough arguments as it is an application)
d) What would be a descriptive name for the abstractions in 2.b?
	No value, causes a parse error on "in"
	That said, 2.b would be considered an application expression

3. What is the value of the following?
a) (\x -> x +x ) 3
	6
b) What is the expression ? (E)
	No value, causes multiple errors.
	That said, the expression for (a) is x -> x +x

4. What is the value of the following?
a) (\x -> 3) 6
	3
b) What would be a descriptive name for this abstractions?
	No value, causes multiple errors.
	That said, 4.a would be considered an abstraction expression into a variable expression


Part B: What do we do with the ??? ?
Type a specific non-recursive definition into a file and load it

1. Look at hLen
consider it looked at
a) Is hLen recursive? Why or why not?
	Well we know it's not because a. we've been told it's not recursive. But properly we know it's not recursive because hLen doesn't call itself anywhere in its definition, or reference any function that references other functions etc. down to hLen again. The only way it could be considered recursive is if it is provided a recursive function as an argument.
b) Is hLen a Higher Order Function? Why or why not?
	Yes; in Haskell, lambda expressions are considered functions, and hLen accepts one as an argument, fulfilling the definition for a Higher Order Function.
c) What is the value of the following:
i. hLen sum [4,5,6]
	12
ii. hLen head [4,5,6]
	6
d???) Does hLen have anything to do with sum or head?
	hLen is a weird function. Basically it just calls the function on the tail of the provided list and adds 1; for instance, in 4.c.i it just calls sum on [5,6] and adds 1, getting 12, where sum [4,5,6] would be 15. On hLen head, it does the same, getting the head of the tail; effectively, it will return the second element of the list, with 1 added to it. The only exceptions are when the list is empty, in which it returns 0, or when there is only one element in the list, in which case it attempts to call the provided function on the empty list, and adds 1 to whatever the function decides to return. In the case of sum, that's easy: it'll always return 1, but head returns an error on the empty list.

2. What is the value of hLen myLength [4,5,6]?
	That's easy: 3.
	myLength works similarly to hLen, but without calling any other functions. myLength is recursive, and instead just obtains the length of any given list, with no notable side effects. hLen is a strange function that, as previously described, acts like myLength for the first element before calling the provided function on the remaining elements. As such, it behaves like myLength for the first element, then adds that to the return value from calling myLength on the remaining value, which is precisely the same as simply calling myLength on the original list.
	
3. What is the relationship between hLen and myLength?
	Whoops, accidentally did this question before I got to it. Basically, hLen acts like myLength on the first element before calling the provided function on the remaining list, adding the two return values together. In both hLen and myLength, the value of the first element is ignored, and the only importance that element holds for either function is whether it exists; the difference is that hLen might care about the values of the remaining elements, while myLength does not differentiate between the various elements in its list, and disregards all stored values, instead noting whether they exist or not.
	
	
Part C: Factorial
Add more stuff to the Haskell file and reload.
1. Define hFact to be a lambda abstraction such that it takes a function as an argument, and returns another function, similar to hLen. Write this so that hFact factorial = factorial. What is the type of hFact?
	Alright, wrote hFact. Not 100% sure I wrote it as a lambda expression though.
	hFact is of type p -> p

2. Apply hFact to ( ^ 2) -- What is the value of hFact (^ 2) 5?
	25
	
3. What is the value of hFact factorial 5? Is it the same value as factorial 5?
	120, and yes, it is the same value as factorial 5; they are also both the same type (Integral a => a)


Part D: General definition
1. Add a specific definition for factorial' to the Haskell file.
What is the type of factorial'?
	Interestingly, it is of type p
	
2. Now define another function.
a) What is the type of fix?
	
b) What is the difference between the code below?
	
